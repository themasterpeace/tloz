 var column = base.createNodeColumn.call(this);
        // Wrap the offset function so that the hanging node's children are
        // aligned to their parent
        wrap(column, 'offset', function (proceed, node, factor) {
            var offset = proceed.call(this, node, factor); // eslint-disable-line no-invalid-this
            // Modify the default output if the parent's layout is 'hanging'
            if (node.hangsFrom) {
                return {
                    absoluteTop: node.hangsFrom.nodeY
                };
            }
            return offset;
        });
        return column;
    },
    translateNode: function (node, column) {
        base.translateNode.call(this, node, column);
        if (node.hangsFrom) {
            node.shapeArgs.height -=
                this.options.hangingIndent;
            if (!this.chart.inverted) {
                node.shapeArgs.y += this.options.hangingIndent;
            }
        }
        node.nodeHeight = this.chart.inverted ?
            node.shapeArgs.width :
            node.shapeArgs.height;
    },
    // General function to apply corner radius to a path - can be lifted to
    // renderer or utilities if we need it elsewhere.
    curvedPath: function (path, r) {
        var d = [];
        for (var i = 0; i < path.length; i++) {
            var x = path[i][1];
            var y = path[i][2];
            if (typeof x === 'number' && typeof y =